{
  "version": "https://jsonfeed.org/version/1",
  "title": "Victor Briganti",
  "home_page_url": "https://Victor-Briganti.github.io",
  "feed_url": "https://Victor-Briganti.github.iofeed.json",
  "description": "A blog for building knowledge",
  "favicon": "https://Victor-Briganti.github.io/assets/favicon.ico",
  "expired": false,
  "author": {
    "name": "Victor Briganti",
    "url": "https://Victor-Briganti.github.io"
  },
  "items": [
    
    

    
    {
      "id": "95b2f5e34649ba8cce7ba7b334f869a8bcd85cde",
      "title": "Compiling the Linux Kernel",
      "summary": "",
      "content_text": " Introduction Preparing the environment Compiling 1. Introduction In the last few months, programming aimed at more obscure areas of computers has piqued my interest.And it was through these studies that I discovered the field of kernel development, and there is no better place to study kernel than the Linux kernel itself.\nBut first and foremost, in order to learn kernel magic, we must first be able to compile one, and this guide will show you how to do so in a Debian system.So lets start.\n2. Preparing the Environment I DO NOT RECOMMEND compiling and installing the kernel on your base system unless you know exactly what you\u0026rsquo;re doing (which you don\u0026rsquo;t if you\u0026rsquo;re reading this).The compilation and installation of a kernel is prone to a lot of errors, and because of that, I do recommend the use of some kind of virtualization, in my project, I used QEMU and KVM, but you can use others.\nHere are some virtualization programs to install your virtual machine:\nVirtualBox\nGNOME Boxes\nVirt-Manager\nAfter the installation of these programs, you will need to get an ISO so you can install Debian (here I\u0026rsquo;m going to use Debian 11). The link for the ISO is here: https://www.debian.org/distrib/\u0026gt;. After you get the ISO and install it on the virtual machine, you are going to get a base Debian install.\nNow the next step is to install the necessary packages so we can compile the kernel.\n# To install it, you must be root (or use sudo). apt update \u0026amp;\u0026amp; apt install xz-utils wget libncurses-dev gawk flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev git bc build-essentials Let\u0026rsquo;s take a closer look at each of these packages so you know what you\u0026rsquo;re installing on your system.\nbuild-essentials; This package contains a list of packages. in this package, you will install the compilers for C (gcc) and C++ (g++), as well as the standard library for C in the developer version, make, and the libraries required to create a Debian package. flex; This is a lexical analyzer. It is used to search for patterns in a file. bison; It\u0026rsquo;s generally used with flex, catches the tokens generated by flex, and then executes some kind of action. dkms; Dynamic Kernel Module Support is a program/framework that enables generating of Linux Kernel modules outside the source tree(very important for developers). bc; Basic Calculator(do I need to say more?). openssl; Library that has some security implementations. wget; It\u0026rsquo;s a CLI application to download files from HTTP, HTTPS or FTP. git; Without a doubt, one of the most important programs for maintaining and tracking software versions.I won\u0026rsquo;t go on any further, but here is a good place to start on this tool: https://git-scm.com/book/de/v2 libncurses-dev; This is the ncurses developers library, a library that provides an API that allows programmers to write applications in the Terminal as if it were a graphical user interface. libssl-dev; Same as openssl but for developers. libefl-dev: a library that allows high-level ELF reading and writing.In the UNIX world (unlike Tolkien), an ELF is a file format for executables. libudev-dev; Udev is the Linux kernel\u0026rsquo;s device manager. xz-utils: compression utilities for files in the xz format. gawk; You never know when you may need to gawk. OBS: Every time you have a package with the name *-dev it is because it is a developer library that is used for applications that need to be compiled before use.(Remember that before kicking your PC, when your program doesn\u0026rsquo;t compile.).\nAfter installing this, we can download the new kernel version that we are going to compile. The debian that I have installed is version 5.10 (you can see this with the command \u0026lsquo;uname -a\u0026rsquo;), I\u0026rsquo;m going to install the Linux kernel in version 6.1.4\nFirst, let\u0026rsquo;s create a directory, so we can work in a more organized way:\nmkdir ~/source \u0026amp;\u0026amp; cd ~/source Now we can download the kernel for compilation (if you want another version, you can simply go here and choose another version: https://www.kernel.org/):\nwget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.1.4.tar.xz Now let\u0026rsquo;s extract it:\ntar -xvf linux-6.1.4.tar.xz \u0026amp;\u0026amp; cd linux-6.1.4 Now we are finally ready to go to the next part.\n3. Compiling This is the final and most painful part of this whole tutorial. Here we are going to use make, a program that reads the makefile and then computes how and what to update and compile.\nThe makefile of the kernel has a lot of options (and I mean a loooooooot of options), so I do encourage you to read some of this options and what they do.\nWe are going to make the .config file that will tell the compiler what he should or should not compile and how (if it is or is not a module). There are a billion ways to create this file, but we are going to use the local mod one (because that was the one that worked).\nmake localmodconfig They are going to ask you a lot of questions The default ones are usually good enough, but if you are not sure, take your time reading some of the options.If you are not happy with what you have, you can just use \u0026ldquo;make menuconfig\u0026rsquo; and edit some of the options.\nAnother way to create this configuration is using \u0026lsquo;make olddefconfig \u0026amp;\u0026amp; make menuconfig\u0026rsquo;. But I have to alert you that if you are going to go that route, you need to remove trusted keys from the system.\nCONFIG_SYSTEM_TRUSTED_KEYS=\u0026#34;\u0026#34; This is necessary because you\u0026rsquo;re definitely not trustworthy.\nAfter making the config now you just need to compile the kernel itself. For that, you have some options, and I\u0026rsquo;m going to show you two of them.\nThe first one uses only the make:\nmake -j2make modules_installmake install Here \u0026lsquo;make -j2\u0026rsquo; is compiling the kernel, and the flag -j2 tells the compiler how many threads he can use for the compilation. Here I fix the number 2 but you can actually just use 1 thread with the command \u0026lsquo;make\u0026rsquo; or use other quantities (if you want to use all, just type \u0026lsquo;make -j$(nproc)\u0026rsquo;)\nThe second way is using make to create a .deb:make -j2 deb-pkg\nIn this way, you are going to create some packages that can be installed using dpkg\u0026rsquo;.\ndpkg -i linux*.deb Now everything that you need to do is reboot the system, and if everything goes well, you will have a Debian with a new kernel version.\nEND If you could get to the end of this tutorial, congratulations! You are at least 10 years older than when you arrived. Compiling your own kernel is definitely a pain, but I hope that by the end of this tutorial you will have a better understanding of how the kernel assembly process works.\nReferences Here are the links that I used in my journey may they help you:\nhttps://wiki.ubuntu.com/Kernel/BuildYourOwnKernel\nhttps://wiki.gentoo.org/wiki/Kernel/Configuration\nhttps://www.kernelconfig.io/index.html\nhttps://lkcamp.gitlab.io/lkcamp_docs/intro_course/lab01/\nhttps://packages.debian.org/sid/\nhttps://wiki.archlinux.org/title/Kernel/Traditional_compilation\n",
      "content_html": "\u003col\u003e\n\u003cli\u003e\u003ca href=\"#1-introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#2-preparing-the-environment\"\u003ePreparing the environment\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#3-compiling\"\u003eCompiling\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"1-introduction\"\u003e1. Introduction\u003c/h1\u003e\n\u003cp\u003eIn the last few months, programming aimed at more obscure areas of computers has piqued my interest.And it was through these studies that I discovered the field of kernel development, and there is no better place to study kernel than the Linux kernel itself.\u003c/p\u003e\n\u003cp\u003eBut first and foremost, in order to learn kernel magic, we must first be able to compile one, and this guide will show you how to do so in a Debian system.So lets start.\u003c/p\u003e\n\u003ch1 id=\"2-preparing-the-environment\"\u003e2. Preparing the Environment\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eI DO NOT RECOMMEND\u003c/strong\u003e compiling and installing the kernel on your base system unless you know exactly what you\u0026rsquo;re doing (which you don\u0026rsquo;t if you\u0026rsquo;re reading this).The compilation and installation of a kernel is prone to a lot of errors, and because of that, I do recommend the use of some kind of virtualization, in my project, I used QEMU and KVM, but you can use others.\u003c/p\u003e\n\u003cp\u003eHere are some virtualization programs to install your virtual machine:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.virtualbox.org/\"\u003eVirtualBox\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://help.gnome.org/users/gnome-boxes/stable/index.html.en#start\"\u003eGNOME Boxes\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://virt-manager.org/\"\u003eVirt-Manager\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eAfter the installation of these programs, you will need to get an ISO so you can install Debian (here I\u0026rsquo;m going to use Debian 11). The link for the ISO is here: \u003ca href=\"https://www.debian.org/distrib/%3E\"\u003ehttps://www.debian.org/distrib/\u0026gt;\u003c/a\u003e. After you get the ISO and install it on the virtual machine, you are going to get a base Debian install.\u003c/p\u003e\n\u003cp\u003eNow the next step is to install the necessary packages so we can compile the kernel.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# To install it, you must be root (or use sudo).   \napt update \u0026amp;\u0026amp; apt install xz-utils wget libncurses-dev gawk flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev git bc build-essentials\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026rsquo;s take a closer look at each of these packages so you know what you\u0026rsquo;re installing on your system.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ebuild-essentials; This package contains a list of packages. in this package, you will install the compilers for C (gcc) and C++ (g++), as well as the standard library for C in the developer version, make, and the libraries required to create a Debian package.\u003c/li\u003e\n\u003cli\u003eflex; This is a lexical analyzer. It is used to search for patterns in a file.\u003c/li\u003e\n\u003cli\u003ebison; It\u0026rsquo;s generally used with flex, catches the tokens generated by flex, and then executes some kind of action.\u003c/li\u003e\n\u003cli\u003edkms; Dynamic Kernel Module Support is a program/framework that enables generating of Linux Kernel modules outside the source tree(very important for developers).\u003c/li\u003e\n\u003cli\u003ebc; Basic Calculator(do I need to say more?).\u003c/li\u003e\n\u003cli\u003eopenssl; Library that has some security implementations.\u003c/li\u003e\n\u003cli\u003ewget; It\u0026rsquo;s a CLI application to download files from HTTP, HTTPS or FTP.\u003c/li\u003e\n\u003cli\u003egit; Without a doubt, one of the most important programs for maintaining and tracking software versions.I won\u0026rsquo;t go on any further, but here is a good place to start on this tool: \u003ca href=\"https://git-scm.com/book/de/v2\"\u003ehttps://git-scm.com/book/de/v2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003elibncurses-dev; This is the ncurses developers library, a library that provides an API that allows programmers to write applications in the Terminal as if it were a graphical user interface.\u003c/li\u003e\n\u003cli\u003elibssl-dev; Same as openssl but for developers.\u003c/li\u003e\n\u003cli\u003elibefl-dev: a library that allows high-level ELF reading and writing.In the UNIX world (unlike Tolkien), an ELF is a file format for executables.\u003c/li\u003e\n\u003cli\u003elibudev-dev; Udev is the Linux kernel\u0026rsquo;s device manager.\u003c/li\u003e\n\u003cli\u003exz-utils: compression utilities for files in the xz format.\u003c/li\u003e\n\u003cli\u003egawk; You never know when you may need to gawk.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOBS: Every time you have a package with the name *-dev it is because it is a developer library that is used for applications that need to be compiled before use.(Remember that before kicking your PC, when your program doesn\u0026rsquo;t compile.).\u003c/p\u003e\n\u003cp\u003eAfter installing this, we can download the new kernel version that we are going to compile. The debian that I have installed is version 5.10 (you can see this with the command \u0026lsquo;uname -a\u0026rsquo;), I\u0026rsquo;m going to install the Linux kernel in version 6.1.4\u003c/p\u003e\n\u003cp\u003eFirst, let\u0026rsquo;s create a directory, so we can work in a more organized way:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emkdir ~/source \u0026amp;\u0026amp; cd ~/source\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow we can download the kernel for compilation (if you want another version, you can simply go here and choose another version: \u003ca href=\"https://www.kernel.org/\"\u003ehttps://www.kernel.org/\u003c/a\u003e):\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.1.4.tar.xz\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow let\u0026rsquo;s extract it:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003etar -xvf linux-6.1.4.tar.xz \u0026amp;\u0026amp; cd linux-6.1.4\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow we are finally ready to go to the next part.\u003c/p\u003e\n\u003ch1 id=\"3-compiling\"\u003e3. Compiling\u003c/h1\u003e\n\u003cp\u003eThis is the final and most painful part of this whole tutorial. Here we are going to use make, a program that reads the makefile and then computes how and what to update and compile.\u003c/p\u003e\n\u003cp\u003eThe makefile of the kernel has a lot of options (and I mean a loooooooot of options), so I do encourage you to read some of this options and what they do.\u003c/p\u003e\n\u003cp\u003eWe are going to make the .config file that will tell the compiler what he should or should not compile and how (if it is or is not a module). There are a billion ways to create this file, but we are going to use the local mod one (because that was the one that worked).\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emake localmodconfig\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThey are going to ask you a lot of questions The default ones are usually good enough, but if you are not sure, take your time reading some of the options.If you are not happy with what you have, you can just use \u0026ldquo;make menuconfig\u0026rsquo; and edit some of the options.\u003c/p\u003e\n\u003cp\u003eAnother way to create this configuration is using \u0026lsquo;make olddefconfig \u0026amp;\u0026amp; make menuconfig\u0026rsquo;. But I have to alert you that if you are going to go that route, you need to remove trusted keys from the system.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eCONFIG_SYSTEM_TRUSTED_KEYS=\u0026#34;\u0026#34; \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is necessary because you\u0026rsquo;re definitely not trustworthy.\u003c/p\u003e\n\u003cp\u003eAfter making the config now you just need to compile the kernel itself. For that, you have some options, and I\u0026rsquo;m going to show you two of them.\u003c/p\u003e\n\u003cp\u003eThe first one uses only the make:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emake -j2make modules_installmake install \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere \u0026lsquo;make -j2\u0026rsquo; is compiling the kernel, and the flag -j2 tells the compiler how many threads he can use for the compilation. Here I fix the number 2 but you can actually just use 1 thread with the command \u0026lsquo;make\u0026rsquo; or use other quantities (if you want to use all, just type \u0026lsquo;make -j$(nproc)\u0026rsquo;)\u003c/p\u003e\n\u003cp\u003eThe second way is using make to create a .deb:\u003ccode\u003emake -j2 deb-pkg\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eIn this way, you are going to create some packages that can be installed using dpkg\u0026rsquo;.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edpkg -i linux*.deb\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow everything that you need to do is reboot the system, and if everything goes well, you will have a Debian with a new kernel version.\u003c/p\u003e\n\u003ch2 id=\"end\"\u003eEND\u003c/h2\u003e\n\u003cp\u003eIf you could get to the end of this tutorial, congratulations! You are at least 10 years older than when you arrived. Compiling your own kernel is definitely a pain, but I hope that by the end of this tutorial you will have a better understanding of how the kernel assembly process works.\u003c/p\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003cp\u003eHere are the links that I used in my journey may they help you:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel\"\u003ehttps://wiki.ubuntu.com/Kernel/BuildYourOwnKernel\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://wiki.gentoo.org/wiki/Kernel/Configuration\"\u003ehttps://wiki.gentoo.org/wiki/Kernel/Configuration\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.kernelconfig.io/index.html\"\u003ehttps://www.kernelconfig.io/index.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://lkcamp.gitlab.io/lkcamp_docs/intro_course/lab01/\"\u003ehttps://lkcamp.gitlab.io/lkcamp_docs/intro_course/lab01/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://packages.debian.org/sid/\"\u003ehttps://packages.debian.org/sid/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://wiki.archlinux.org/title/Kernel/Traditional_compilation\"\u003ehttps://wiki.archlinux.org/title/Kernel/Traditional_compilation\u003c/a\u003e\u003c/p\u003e\n",
      "url": "https://Victor-Briganti.github.io/posts/debian-kernel/",
      "date_published": "1106-01-09T100:11:00+00:00",
      "date_modified": "1106-01-09T100:11:00+00:00",
      "author": {
        "name": "Victor Briganti",
        "url": "https://Victor-Briganti.github.io"
      }
    },
    
    {
      "id": "dc7286ae4f28acfd62426b4a7a12ddd6d6a68f96",
      "title": "Understanding Compilers",
      "summary": "",
      "content_text": " Introduction It\u0026rsquo;s All Binaries Automatons Roll Out Compiling Flexing my Bison with a Calculator 1.Introduction When we think of computers, particularly programming languages, one of the first questions that should come to mind is, \u0026ldquo;How does the computer understand that?\u0026ldquo;And that is one of the questions that can be answered by analyzing how a compiler works.\nCompilers are basically programs that can translate programming languages into computer language. And that is what we are going to talk about in this article.\n2.It\u0026rsquo;s All Binaries As I was saying in the introduction, for the computer to be able to execute some program, he needs to be able to read and understand the file, and for that to work, it\u0026rsquo;s necessary to transform the file into a binary format.\nAll the things that the computer understands are basically 1s and 0s (on and off), and the computer works like that because its hardware architecture is basically a bunch of wires receiving electrical signals, and each one of these signals is going to be read by the CPU which will perform some action. There are various computer architectures, but in a similar way to how we give a context to sound and call it a world, signals provide context, and the combination of some of them has meaning, as in the case of \u0026ldquo;01101000 01101001\u0026rdquo; (which means hi in binary).Some actions are performed as we give meaning to these combinations and pass them on to the CPU, such as arithmetic operations.\nBut the thing is, it\u0026rsquo;s extremely difficult to write a word in binary in two letters because it requires 16 numbers to be written, so programming languages emerge over time. A programming language is a method that we discovered for writing binary in a comprehensive manner. We write the program in the same way that we would write any other type of text, using our usual alphabet (but with different grammatical rules), and then pass that text to a translator, which is where we introduce the compiler. Everything that the compiler does is to get this text that you write, read it and translate it in a way that a computer could also read it and perform the actions that you are specifying.\n3.Automatons Roll Out Before we get to studying the compilers, it is important to understand some other concepts of computation. And one of the most important theories that we need to understand when we are dealing with computers is the theory of automata.\nThis theory studies the idea of an abstract machine and how it would work. This theory is a little bit extensive to be covered in one single article, but in a brief way, we have different kinds of machines, each with a different way of executing an action. The states machine will most likely be used for the compiler\u0026rsquo;s part.\nIn automata, a state machine, will perform actions depending on the state where you are and the input you receive.\nThis is an example of a state machine in which the inputs are 0 and 1, and each time an input is passed in a specific state, the machine moves to another state (or remains in the same state), and the machine is in an accepted state when it stops at S1 after all inputs. These are machines that can have more than one accepted state. In more complex machines, we have a nondeterministic way of dealing with the inputs, which can be a problem in some cases, in other cases, not just the states are needed, but a stack is needed to store the inputs, and that can get more and more complex depending on the machine.\nThe compiler itself is not tied to a machine type, but we study automata theory mainly because we use its concepts in the creation of a grammar. We use a grammar to identify states that a machine can be in and to generate tokens that can be translated in a way that the computer can follow the correct flow of execution.\nFor that to be possible, we use the concept of regular expressions, which in a simple way can identify patterns in a string. An example of this is the regex (for the non-intimate regular expressions) \u0026lsquo;[0-9]+\u0026rdquo; in which we are recognizing all the patterns of numbers (0 to 9) that appear one or more times (which is done with the + symbol). With this expression, we can generate tokens that express a number for the compiler.\nTo make this idea a little simpler to visualize, let\u0026rsquo;s exemplify with a grammar rule:\nE -\u0026gt; E + E\nE -\u0026gt; E * E\nWith this grammar here, we are saying that every id (that in this case we are going to consider a number) can be considered a E(an expression) and as you can see going up the grammar, we can a addition on the multiplication of two expressions within a expression itself. So in a more simple way, an expression like 1+1*2 can be:\n-\u0026gt; 1+1*2\n-\u0026gt; E+1*2\n-\u0026gt; E+E*2\n-\u0026gt; E*2\n-\u0026gt; E*E\n-\u0026gt; E\nThis is the way that compilers identify expressions and organize the execution of the code. I not going to extend myself further on this, but if you are curious and want to play with grammar, this site is wonderful: https://mdaines.github.io/grammophone/#/lalr1-automaton\n4. Compiling And finally we get to compiling this is one of the most extensive subjects in computing and one of the most complex as well. I will try to give you a brief introduction on this subject in a way that is easy to follow without getting into too many details.\nSo as we see in the automatons, we have a grammar that is basically a programming language. So one of the first things that a compiler needs to know is how to interpret a grammar, in most cases, the compiler passes a lexical analyzer that will identify the tokens (as we already did) and then he parses these tokens, generating blocks of code that can be read and executed.\nSome of the things that the compiler needs to consider when doing his analysis are the names of variables, he needs to consider the type of the variable because each kind has a different size in memory, and he also needs to know how they are going to interact with each other. For example in C a char is 1 byte, int is 4 bytes, a long is 8 bytes and so on, in addition to this there\u0026rsquo;s special kinds of variables, as is the case of the struct that can receive different variables within itself or the array that supports several of the same type not to mention the pointers that work in a completely different way with memory addresses. Not only that, but the compiler must understand how the program will interact with the operational system, as each has a unique way of working with executables. One interesting study case is Java because this language has a virtual machine (JVM), and instead of executing directly in the OS the code is first translated in a way that the JVM can read, and then the JVM talks to the OS. That\u0026rsquo;s a really clever way to port a code to multiple types of operating systems without having to change the code.\nAn executable segment can be called a block of code, These blocks are basically binary blocks that are going to be pushed into the memory and then from the memory to the CPU to perform some actions. Each new function or library needs to be pushed into the main memory (usually the RAM), we can divide this memory in this concept:\nAs you can see in the image, we have the global and static memory where we can find the main function and some global variables, and then we have the stack and the heap, which is where we are going to push the functions and other dynamic variables.\nAnother important process that is not the compiler\u0026rsquo;s responsibility but that we ended up associating with him is the linking process, which is when we get a function from another file and push it to memory to be used with our program or the so-called libraries.To make this work, the compiler needs to leave blank addresses that are going to be picked up by the linker and associated with the right library.\nThis topic is very complex and has a lot of discussion on each subtopic. I\u0026rsquo;ll give you some links to other places where you can read more about it and understand some concepts in greater depth:\nhttps://akkadia.org/drepper/dsohowto.pdf\nBeginner\u0026rsquo;s Guide to Linkers\nhttp://www2.hawaii.edu/~takebaya/ics111/process_of_programming/process_of_programming.html\nhttps://www.amazon.com/Engineering-Compiler-Keith-D-Cooper/dp/0128154128/ref=zg_bs_3970_sccl_6/130-6334203-3969022?psc=1\n5.Flexing my Bison with a Calculator For you guys (and for myself too) I made a little program that will work as a calculator with Flex and Bison. \u0026ldquo;What the f@$k is Flex and Bison?\u0026rdquo; you might ask. \u0026ldquo;Be patient, young padawan. I\u0026rsquo;m going to explain what they do and give you my little program so you can play with it a little.\u0026rdquo;\nSo starting with Flex (the fast lexical analyzer) he is responsible for getting a file, analyzing each word, and returning a token. Here is an example of part of the code in my calculator:\n\u0026#34;+\u0026#34; { return ADD; } \u0026#34;-\u0026#34; { return SUB; } \u0026#34;*\u0026#34; { return MULT; } As you can see, we have three symbols: the plus, minus, and asterisk. Each time one of them is found in a file that is passed to the flex the ADD, SUB or MULT will be respectively returned. As we pass these values to our YACC (yet another compiler-compiler, in this case the Bison),\nWhen we get into the Bison, what we get is the grammar part and some other code parts that are going to be executed as the tokens are passed. Here is the Bison part of the calculator:\nint_expr: I_NUM { $$ = $1; } | int_expr ADD int_expr { $$ = $1 + $3; } | int_expr SUB int_expr { $$ = $1 - $3; } | int_expr MULT int_expr { $$ = $1 * $3; } | P_LEFT int_expr P_RIGHT { $$ = $2; } | SUB int_expr { $$ = -$2; } Here is the grammar, and as you can see, there are two types of tokens: the expression (in this case, an integer expression) and the operation token, which will define some kind of arithmetic operation.\nSo we will compile (well, if that is not ironic) these two programs together, and we will have a program that can read and execute the expression in the correct flow of data.\nIf you want to see the whole program, you can get the source code here:GitHub - JohhnMag0/Abaco-Calculator\nThe documentation of flex and bison is not very good(for me at least), so if you want toy with it a little I recommend this book as a entrance in this worl https://www.amazon.com.br/Flex-Bison-John-Levine/dp/0596155972/ref=sr_1_1?keywords=flex+and+bison\u0026amp;qid=1670848361\u0026amp;sr=8-1\u0026amp;ufe=app_do%3Aamzn1.fos.6d798eae-cadf-45de-946a-f477d47705b9\nFor the ones that don\u0026rsquo;t like C(you guy are monsters) there is other types of librarys that can be useful for you that are write in other languages. Here is one that is written in python is a little old but is good enough: PLY (Python Lex-Yacc)\nAnd if you are really hardcore(Jorge: Quiere ser hardcore y su mama no lo deja - YouTube) and want to go all win writing your first language(because why not) the lvm has a great documentation on how to start [My First Language Frontend with LLVM Tutorial — LLVM 16.0.0git documentation](https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\nEND The concept of compilers is an extremely dense thing and you can really go down a rabbit hole when studying it but I hope this article has shed some light on what it is and where you can start. Stay safe and goodbye.\n",
      "content_html": "\u003col\u003e\n\u003cli\u003e\u003ca href=\"#1introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#2its-all-binaries\"\u003eIt\u0026rsquo;s All Binaries\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#3automatons-roll-out\"\u003eAutomatons Roll Out\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#4-compiling\"\u003eCompiling\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#5flexing-my-bison-with-a-calculator\"\u003eFlexing my Bison with a Calculator\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"1introduction\"\u003e1.Introduction\u003c/h2\u003e\n\u003cp\u003eWhen we think of computers, particularly programming languages, one of the first questions that should come to mind is, \u0026ldquo;How does the computer understand that?\u0026ldquo;And that is one of the questions that can be answered by analyzing how a compiler works.\u003c/p\u003e\n\u003cp\u003eCompilers are basically programs that can translate programming languages into computer language. And that is what we are going to talk about in this article.\u003c/p\u003e\n\u003ch2 id=\"2its-all-binaries\"\u003e2.It\u0026rsquo;s All Binaries\u003c/h2\u003e\n\u003cp\u003eAs I was saying in the introduction, for the computer to be able to execute some program, he needs to be able to read and understand the file, and for that to work, it\u0026rsquo;s necessary to transform the file into a binary format.\u003c/p\u003e\n\u003cp\u003eAll the things that the computer understands are basically 1s and 0s (on and off), and the computer works like that because its hardware architecture is basically a bunch of wires receiving electrical signals, and each one of these signals is going to be read by the CPU which will perform some action. There are various computer architectures, but in a similar way to how we give a context to sound and call it a world, signals provide context, and the combination of some of them has meaning, as in the case of \u0026ldquo;01101000 01101001\u0026rdquo; (which means hi in binary).Some actions are performed as we give meaning to these combinations and pass them on to the CPU, such as arithmetic operations.\u003c/p\u003e\n\u003cp\u003eBut the thing is, it\u0026rsquo;s extremely difficult to write a word in binary in two letters because it requires 16 numbers to be written, so programming languages emerge over time. A programming language is a method that we discovered for writing binary in a comprehensive manner. We write the program in the same way that we would write any other type of text, using our usual alphabet (but with different grammatical rules), and then pass that text to a translator, which is where we introduce the compiler. Everything that the compiler does is to get this text that you write, read it and translate it in a way that a computer could also read it and perform the actions that you are specifying.\u003c/p\u003e\n\u003ch2 id=\"3automatons-roll-out\"\u003e3.Automatons Roll Out\u003c/h2\u003e\n\u003cp\u003eBefore we get to studying the compilers, it is important to understand some other concepts of computation. And one of the most important theories that we need to understand when we are dealing with computers is the theory of automata.\u003c/p\u003e\n\u003cp\u003eThis theory studies the idea of an abstract machine and how it would work. This theory is a little bit extensive to be covered in one single article, but in a brief way, we have different kinds of machines, each with a different way of executing an action. The states machine will most likely be used for the compiler\u0026rsquo;s part.\u003c/p\u003e\n\u003cp\u003eIn automata, a state machine, will perform actions depending on the state where you are and the input you receive.\u003c/p\u003e\n\u003cp\u003e\u003cimg\n  src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/DFAexample.svg/300px-DFAexample.svg.png\"\n  alt=\"\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/p\u003e\n\u003cp\u003eThis is an example of a state machine in which the inputs are 0 and 1, and each time an input is passed in a specific state, the machine moves to another state (or remains in the same state), and the machine is in an accepted state when it stops at S1 after all inputs. These are machines that can have more than one accepted state. In more complex machines, we have a nondeterministic way of dealing with the inputs, which can be a problem in some cases, in other cases, not just the states are needed, but a stack is needed to store the inputs, and that can get more and more complex depending on the machine.\u003c/p\u003e\n\u003cp\u003eThe compiler itself is not tied to a machine type, but we study automata theory mainly because we use its concepts in the creation of a grammar. We use a grammar to identify states that a machine can be in and to generate tokens that can be translated in a way that the computer can follow the correct flow of execution.\u003c/p\u003e\n\u003cp\u003eFor that to be possible, we use the concept of regular expressions, which in a simple way can identify patterns in a string. An example of this is the regex (for the non-intimate regular expressions) \u0026lsquo;[0-9]+\u0026rdquo; in which we are recognizing all the patterns of numbers (0 to 9) that appear one or more times (which is done with the + symbol). With this expression, we can generate tokens that express a number for the compiler.\u003c/p\u003e\n\u003cp\u003eTo make this idea a little simpler to visualize, let\u0026rsquo;s exemplify with a grammar rule:\u003c/p\u003e\n\u003cp\u003eE -\u0026gt; E + E\u003c/p\u003e\n\u003cp\u003eE -\u0026gt; E * E\u003c/p\u003e\n\u003cp\u003eWith this grammar here, we are saying that every id (that in this case we are going to consider a number) can be considered a E(an expression) and as you can see going up the grammar, we can a addition on the multiplication of two expressions within a expression itself. So in a more simple way, an expression like 1+1*2 can be:\u003c/p\u003e\n\u003cp\u003e-\u0026gt; 1+1*2\u003c/p\u003e\n\u003cp\u003e-\u0026gt; E+1*2\u003c/p\u003e\n\u003cp\u003e-\u0026gt; E+E*2\u003c/p\u003e\n\u003cp\u003e-\u0026gt; E*2\u003c/p\u003e\n\u003cp\u003e-\u0026gt; E*E\u003c/p\u003e\n\u003cp\u003e-\u0026gt; E\u003c/p\u003e\n\u003cp\u003eThis is the way that compilers identify expressions and organize the execution of the code. I not going to extend myself further on this, but if you are curious and want to play with grammar, this site is wonderful:\n\u003ca href=\"https://mdaines.github.io/grammophone/#/lalr1-automaton\"\u003ehttps://mdaines.github.io/grammophone/#/lalr1-automaton\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"4-compiling\"\u003e4. Compiling\u003c/h2\u003e\n\u003cp\u003eAnd finally we get to compiling this is one of the most extensive subjects in computing and one of the most complex as well. I will try to give you a brief introduction on this subject in a way that is easy to follow without getting into too many details.\u003c/p\u003e\n\u003cp\u003eSo as we see in the automatons, we have a grammar that is basically a programming language. So one of the first things that a compiler needs to know is how to interpret a grammar, in most cases, the compiler passes a lexical analyzer that will identify the tokens (as we already did) and then he parses these tokens, generating blocks of code that can be read and executed.\u003c/p\u003e\n\u003cp\u003eSome of the things that the compiler needs to consider when doing his analysis are the names of variables, he needs to consider the type of the variable because each kind has a different size in memory, and he also needs to know how they are going to interact with each other. For example in C a char is 1 byte, int is 4 bytes, a long is 8 bytes and so on, in addition to this there\u0026rsquo;s special kinds of variables, as is the case of the struct that can receive different variables within itself or the array that supports several of the same type not to mention the pointers that work in a completely different way with memory addresses. Not only that, but the compiler must understand how the program will interact with the operational system, as each has a unique way of working with executables. One interesting study case is Java because this language has a virtual machine (JVM), and instead of executing directly in the OS the code is first translated in a way that the JVM can read, and then the JVM talks to the OS. That\u0026rsquo;s a really clever way to port a code to multiple types of operating systems without having to change the code.\u003c/p\u003e\n\u003cp\u003eAn executable segment can be called a block of code, These blocks are basically binary blocks that are going to be pushed into the memory and then from the memory to the CPU to perform some actions. Each new function or library needs to be pushed into the main memory (usually the RAM), we can divide this memory in this concept:\u003c/p\u003e\n\u003cp\u003eAs you can see in the image, we have the global and static memory where we can find the main function and some global variables, and then we have the stack and the heap, which is where we are going to push the functions and other dynamic variables.\u003c/p\u003e\n\u003cp\u003eAnother important process that is not the compiler\u0026rsquo;s responsibility but that we ended up associating with him is the linking process, which is when we get a function from another file and push it to memory to be used with our program or the so-called libraries.To make this work, the compiler needs to leave blank addresses that are going to be picked up by the linker and associated with the right library.\u003c/p\u003e\n\u003cp\u003eThis topic is very complex and has a lot of discussion on each subtopic. I\u0026rsquo;ll give you some links to other places where you can read more about it and understand some concepts in greater depth:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://akkadia.org/drepper/dsohowto.pdf\"\u003ehttps://akkadia.org/drepper/dsohowto.pdf\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.lurklurk.org/linkers/linkers.html\"\u003eBeginner\u0026rsquo;s Guide to Linkers\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://www2.hawaii.edu/~takebaya/ics111/process_of_programming/process_of_programming.html\"\u003ehttp://www2.hawaii.edu/~takebaya/ics111/process_of_programming/process_of_programming.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.amazon.com/Engineering-Compiler-Keith-D-Cooper/dp/0128154128/ref=zg_bs_3970_sccl_6/130-6334203-3969022?psc=1\"\u003ehttps://www.amazon.com/Engineering-Compiler-Keith-D-Cooper/dp/0128154128/ref=zg_bs_3970_sccl_6/130-6334203-3969022?psc=1\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"5flexing-my-bison-with-a-calculator\"\u003e5.Flexing my Bison with a Calculator\u003c/h2\u003e\n\u003cp\u003eFor you guys (and for myself too) I made a little program that will work as a calculator with Flex and Bison. \u0026ldquo;What the f@$k is Flex and Bison?\u0026rdquo; you might ask. \u0026ldquo;Be patient, young padawan. I\u0026rsquo;m going to explain what they do and give you my little program so you can play with it a little.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eSo starting with Flex (the fast lexical analyzer) he is responsible for getting a file, analyzing each word, and returning a token. Here is an example of part of the code in my calculator:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026#34;+\u0026#34; { return ADD; }\n\u0026#34;-\u0026#34; { return SUB; }\n\u0026#34;*\u0026#34; { return MULT; }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see, we have three symbols: the plus, minus, and asterisk. Each time one of them is found in a file that is passed to the flex the ADD, SUB or MULT will be respectively returned. As we pass these values to our YACC (yet another compiler-compiler, in this case the Bison),\u003c/p\u003e\n\u003cp\u003eWhen we get into the Bison, what we get is the grammar part and some other code parts that are going to be executed as the tokens are passed. Here is the Bison part of the calculator:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eint_expr: I_NUM { $$ = $1; }\n    | int_expr ADD int_expr { $$ = $1 + $3; }\n    | int_expr SUB int_expr { $$ = $1 - $3; }\n    | int_expr MULT int_expr { $$ = $1 * $3; }\n    | P_LEFT int_expr P_RIGHT { $$ = $2; }\n    | SUB int_expr { $$ = -$2; }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eHere is the grammar, and as you can see, there are two types of tokens: the expression (in this case, an integer expression) and the operation token, which will define some kind of arithmetic operation.\u003c/p\u003e\n\u003cp\u003eSo we will compile (well, if that is not ironic) these two programs together, and we will have a program that can read and execute the expression in the correct flow of data.\u003c/p\u003e\n\u003cp\u003eIf you want to see the whole program, you can get the source code here:\u003ca href=\"https://github.com/JohhnMag0/Abaco-Calculator\"\u003eGitHub - JohhnMag0/Abaco-Calculator\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe documentation of flex and bison is not very good(for me at least), so if you want toy with it a little I recommend this book as a entrance in this worl \u003ca href=\"https://www.amazon.com.br/Flex-Bison-John-Levine/dp/0596155972/ref=sr_1_1?keywords=flex+and+bison\u0026amp;qid=1670848361\u0026amp;sr=8-1\u0026amp;ufe=app_do%3Aamzn1.fos.6d798eae-cadf-45de-946a-f477d47705b9\"\u003ehttps://www.amazon.com.br/Flex-Bison-John-Levine/dp/0596155972/ref=sr_1_1?keywords=flex+and+bison\u0026amp;qid=1670848361\u0026amp;sr=8-1\u0026amp;ufe=app_do%3Aamzn1.fos.6d798eae-cadf-45de-946a-f477d47705b9\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eFor the ones that don\u0026rsquo;t like C(you guy are monsters) there is other types of librarys that can be useful for you that are write in other languages. Here is one that is written in python is a little old but is good enough: \u003ca href=\"https://www.dabeaz.com/ply/\"\u003ePLY (Python Lex-Yacc)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eAnd if you are really hardcore(\u003ca href=\"https://www.youtube.com/watch?v=b-HbPN6n2Gc\"\u003eJorge: Quiere ser hardcore y su mama no lo deja - YouTube\u003c/a\u003e) and want to go all win writing your first language(because why not) the lvm has a great documentation on how to start [My First Language Frontend with LLVM Tutorial — LLVM 16.0.0git documentation](\u003ca href=\"https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\"\u003ehttps://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"end\"\u003eEND\u003c/h2\u003e\n\u003cp\u003eThe concept of compilers is an extremely dense thing and you can really go down a rabbit hole when studying it but I hope this article has shed some light on what it is and where you can start. Stay safe and goodbye.\u003c/p\u003e\n",
      "url": "https://Victor-Briganti.github.io/posts/compiler-world/",
      "date_published": "11126-11-09T120:1111:00+00:00",
      "date_modified": "11126-11-09T120:1111:00+00:00",
      "author": {
        "name": "Victor Briganti",
        "url": "https://Victor-Briganti.github.io"
      }
    },
    
    {
      "id": "ced76dee92f81e8ba442831db4d79de0d8d6c5dd",
      "title": "Vim or How do I exit this?",
      "summary": "",
      "content_text": " Introduction A Brief History of VIM VIMtutor Modes Useful Commands Plug-ins and .vimrc 1. Introduction If you came here because of the title, I will just answer you on the spot: :wq if you want to save before leaving, or :q! if you just want to exit without saving. If that was all that you needed to know and you really didn\u0026rsquo;t like how difficult it was to use Vim, I can\u0026rsquo;t hold you in this article anymore. All I can say is good luck on your journey and try using Nano next time. Now, if you came here with the idea of learning a little bit more about how this wonderful (but sometimes complex) tool works, you\u0026rsquo;re welcome. So let\u0026rsquo;s start.\n2. A Brief History of VIM VIM is actually an acronym for \u0026ldquo;Vi IMproved,\u0026rdquo; and what the heck is VI? Well, VI was a text editor created in the UNIX era, which in turn was based on ed, a line editor that was the basis for the creation of another fantastic tool, sed, but I\u0026rsquo;m not going to talk about it (not now, anyway). The thing is, VIM comes from an ancient lineage of editors, and that is why there are a lot of things in Vim that don\u0026rsquo;t look quite right or seem more complex than they need to be. But what I\u0026rsquo;m really going to try to show you is that although it seems very complicated to use this tool, each of the little pieces that make it up is very well planned, and you really need to consider that in the technological field, something that continues to exist even after a long time has managed to prove itself. So if you are having trouble getting used to VIM, don\u0026rsquo;t give up; you can do amazing things with it—just give yourself time. Now that I\u0026rsquo;ve paid tribute to Bram Moolenaar and given you a life lesson (which you didn\u0026rsquo;t ask for, by the way), let\u0026rsquo;s see it in practice.\n3. VIMtutor One of the first things that you need to get used to if you want to work with software is reading the documentation. This is one of those things that you really should start doing because it is the best way to learn (if the documentation is good). In the case of Vim, we have the vimtutor (just paste it in your terminal), and just like that, you have all that you need to get started with Vim. At first, it will look like a lot, and quite frankly, I don\u0026rsquo;t remember everything that Vim can do and very often need to refer to my notes to remember some of those things. It\u0026rsquo;s very important that you read that documentation and try some of the commands that appear; you will not know everything, but with time, you will see which things you will be using very often. Another great source for learning is books, and for me, one of the greatest books if you want to learn about Vim or Neovim is Practical Vim by Drew Neil. It\u0026rsquo;s a great source of material and will give you a good grasp on Vim.\n4. Modes If you followed what I said in the previous section, much of what I am going to say here you must have already seen. But revisiting never hurts. So before we get started, I need you to understand the modes that you are going to encounter, because each command has to be entered in a certain mode to work.\nNormal: When you open a file, this is the first mode you see. You can think of this mode as the movement mode; it’s here that you are going to move lines, delete, copy, paste, and so on. It\u0026rsquo;s also from this mode that you can go to any other mode. You can access this mode by pressing Esc.\nInsert: This is the mode that you use to insert text. You can also do movement in this mode, but in Normal mode, it\u0026rsquo;s way faster. You can enter this mode by pressing i when in Normal mode.\nVisual: In this mode, you can select a lot of lines all at once, similar to what you do with the mouse. Here, you can use the same movements as in Normal mode, but this mode really shines in copying, pasting, and deleting lines. In Normal mode, press v to enter Visual mode. There are variations such as \u0026ldquo;visual block,\u0026rdquo; which lets you select by column, and \u0026ldquo;visual line,\u0026rdquo; which allows you to select several lines at the same time.\nCommand: In this mode, which is accessed by pressing the : key in Normal mode, you can enter commands such as substitution commands or the help command, for example. I\u0026rsquo;m going to leave an image here that summarizes some of the commands available on the keyboard. You are probably screaming and asking, \u0026ldquo;WHY ARE THERE SO MANY MODES? I JUST WANT TO WRITE!\u0026rdquo; I know that at first it looks like an airplane cockpit, and that\u0026rsquo;s why I like to start with some history. You need to understand that this was created before the mouse era, so the big thing about Vim is that you can do pretty much everything using just the keyboard. Again, have a little patience, and you will get there.\n5. Useful Commands So now that you are starting to get used to some terminologies and commands, we are going to move forward so that I can show you some commands that I think are very useful. So let\u0026rsquo;s get started:\nf\u0026lt;letter\u0026gt;: With this command, you can jump to a certain pattern within a line. You can go forward or backward using ; or ,. x: Deletes a character. 0: Moves to the start of the line. $: Moves to the end of the line. *: Selects a whole word in the file. You can search for this word using n for forward searches or N for backward searches. :\u0026lt;number\u0026gt;: Moves to any line that you specify. :\u0026lt;number\u0026gt;t\u0026lt;number\u0026gt;: Copies the content from the first line number to the second line number. :\u0026lt;number\u0026gt;m\u0026lt;number\u0026gt;: Moves the content from the first line number to the second line number. \u0026lt;CTRL-o\u0026gt;: A very cool command that I don\u0026rsquo;t see many people talking about. If you press this in Insert mode, it enters Normal mode, executes an action, and returns to Insert mode. \u0026lt;CTRL-n\u0026gt; and \u0026lt;CTRL-p\u0026gt;: These two commands in Insert mode permit you to autocomplete a word. \u0026lt;CTRL-x\u0026gt; followed by \u0026lt;CTRL-l\u0026gt;: These two commands need to be used one after another, but they basically autocomplete an entire line. k, j, h, and l: In Normal or Visual mode, these correspond to the arrows up (k), down (j), left (h), and right (l). w: Moves to the start of the next word. e: Moves to the end of the next word. b: Moves to the start of the previous word. y: Copies. yw copies the entire word. p and P: Both are used to paste, but p pastes after the line, and P pastes before the line. d: Deletes. It\u0026rsquo;s important to know that in Vim, deleting something is the same as cutting, so if you copy some text and then delete, the text in your buffer will be the one that was deleted. dw deletes an entire word. c: Deletes and enters Insert mode (very good for saving time). One good use of this command is with w; cw lets you delete a word and insert text at the same time. \u0026lt;CTRL-v\u0026gt; followed by \u0026lt;SHIFT-i\u0026gt;: When in block Visual mode, select all the lines that you want to edit, then press and make the edits you want, then press \u0026lt;ESC\u0026gt;. All the lines you selected will be edited. / and ?: These commands allow you to search for a word in the entire file. n searches forward, and N searches backward. / starts the search from the top, and ? starts the search from the bottom. // and ??: Executes the last search. =: This magical command allows you to indent all your code (just beautiful). .: Executes the last command. %s/undone/done/g: This is an important command to remember. With this command, you can substitute every occurrence of a word. So let\u0026rsquo;s break it down: % means all lines (you could substitute this for specific lines), s means substitute, /undone is the word you are searching for, /done is the word that will replace /undone, and /g means to execute it globally; otherwise, it would execute just once per line. There are other commands and features you could learn about Vim, such as registers and macros, which can really improve your experience. But I won\u0026rsquo;t cover those in this article. If you are interested in this type of thing, you could refer to the book I recommended earlier; it covers a lot of this kind of content.\n6. Plug-ins and .vimrc If you are already feeling overwhelmed by all this, don\u0026rsquo;t worry; there\u0026rsquo;s always more. One of the greatest things about Vim is that it\u0026rsquo;s very flexible and lets you use the tool in the way that you think suits you best.\nThere are two ways of customizing your Vim experience: you can modify its usability by adding extensions, which will give you a whole new perspective on what you can do. For that, you can use plug-ins. I have to admit that I\u0026rsquo;m not a huge fan of using plug-ins myself, but if you need something more robust, you should definitely take a look. When we talk about plug-ins, we also need to talk about Neovim. It’s essentially what Vim was to VI—a way to improve the software. Although there’s kind of a rivalry between users of both, I have to say that if you need something more like an IDE, you should definitely consider Neovim. The best thing about it is that you can have both on your machine, so it’s definitely worth exploring.\nAnother thing you can do to make your life easier while using Vim is to have a good .vimrc, which is your configuration file. With this file, you can install your plug-ins, change keybindings, and more. Knowing how to configure your .vimrc is as important as learning any keybinding because it’s through this configuration file that you can make Vim feel exactly how you want it to, so keep that in mind.\nOne of the things about dotfiles and plug-ins is that they are very personal, and I can’t tell you exactly what you should or shouldn’t use. Instead of showing you my dotfile and the plug-ins that I’m currently using, I will give you some links to good starting points:\nGitHub - junegunn/vim-plug: Minimalist Vim Plugin Manager This one is my personnal favorite in plug-in management, if you are gonna use the neovim you\u0026rsquo;re probably using other extension but this one works quite well for me.\nGitHub - NvChad/NvChad: An attempt to make neovim cli functional like an IDE while being very beautiful, blazing fast startuptime ~ 14ms to 67ms This is more a a place to start, here you are gonna find a neovim distribution that come with a lot of things pre-configured, you don\u0026rsquo;t need to use this but it\u0026rsquo;s nice to have a base to start with.\nVim: help.txt again the vim documentation is one of the best places to get anything that you need to know. And this is the case for .vimrc .\nYou can also get better information about the options in .vimrc with the command :help vimrc.\nEND So we’ve reached the end of this article. I hope that you’ve gotten a good push in the direction of how to use Vim and where to start. And as always, remember :wq (stay safe and goodbye).\n",
      "content_html": "\u003col\u003e\n\u003cli\u003e\u003ca href=\"#1-introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#2-a-brief-history-of-vim\"\u003eA Brief History of VIM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#3-vimtutor\"\u003eVIMtutor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#4-modes\"\u003eModes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#5-useful-commands\"\u003eUseful Commands\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#6-plug-ins-and-vimrc\"\u003ePlug-ins and .vimrc\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"1-introduction\"\u003e1. Introduction\u003c/h2\u003e\n\u003cp\u003eIf you came here because of the title, I will just answer you on the spot: :wq if you want to save before leaving, or :q! if you just want to exit without saving. If that was all that you needed to know and you really didn\u0026rsquo;t like how difficult it was to use Vim, I can\u0026rsquo;t hold you in this article anymore. All I can say is good luck on your journey and try using Nano next time. Now, if you came here with the idea of learning a little bit more about how this wonderful (but sometimes complex) tool works, you\u0026rsquo;re welcome. So let\u0026rsquo;s start.\u003c/p\u003e\n\u003ch2 id=\"2-a-brief-history-of-vim\"\u003e2. A Brief History of VIM\u003c/h2\u003e\n\u003cp\u003eVIM is actually an acronym for \u0026ldquo;Vi IMproved,\u0026rdquo; and what the heck is VI? Well, VI was a text editor created in the UNIX era, which in turn was based on ed, a line editor that was the basis for the creation of another fantastic tool, sed, but I\u0026rsquo;m not going to talk about it (not now, anyway). The thing is, VIM comes from an ancient lineage of editors, and that is why there are a lot of things in Vim that don\u0026rsquo;t look quite right or seem more complex than they need to be. But what I\u0026rsquo;m really going to try to show you is that although it seems very complicated to use this tool, each of the little pieces that make it up is very well planned, and you really need to consider that in the technological field, something that continues to exist even after a long time has managed to prove itself. So if you are having trouble getting used to VIM, don\u0026rsquo;t give up; you can do amazing things with it—just give yourself time. Now that I\u0026rsquo;ve paid tribute to Bram Moolenaar and given you a life lesson (which you didn\u0026rsquo;t ask for, by the way), let\u0026rsquo;s see it in practice.\u003c/p\u003e\n\u003ch2 id=\"3-vimtutor\"\u003e3. VIMtutor\u003c/h2\u003e\n\u003cp\u003eOne of the first things that you need to get used to if you want to work with software is reading the documentation. This is one of those things that you really should start doing because it is the best way to learn (if the documentation is good). In the case of Vim, we have the vimtutor (just paste it in your terminal), and just like that, you have all that you need to get started with Vim. At first, it will look like a lot, and quite frankly, I don\u0026rsquo;t remember everything that Vim can do and very often need to refer to my notes to remember some of those things. It\u0026rsquo;s very important that you read that documentation and try some of the commands that appear; you will not know everything, but with time, you will see which things you will be using very often. Another great source for learning is books, and for me, one of the greatest books if you want to learn about Vim or Neovim is Practical Vim by Drew Neil. It\u0026rsquo;s a great source of material and will give you a good grasp on Vim.\u003c/p\u003e\n\u003cp\u003e\u003ca id=\"modes\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"4-modes\"\u003e4. Modes\u003c/h2\u003e\n\u003cp\u003eIf you followed what I said in the previous section, much of what I am going to say here you must have already seen. But revisiting never hurts. So before we get started, I need you to understand the modes that you are going to encounter, because each command has to be entered in a certain mode to work.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eNormal: When you open a file, this is the first mode you see. You can think of this mode as the movement mode; it’s here that you are going to move lines, delete, copy, paste, and so on. It\u0026rsquo;s also from this mode that you can go to any other mode. You can access this mode by pressing Esc.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eInsert: This is the mode that you use to insert text. You can also do movement in this mode, but in Normal mode, it\u0026rsquo;s way faster. You can enter this mode by pressing i when in Normal mode.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eVisual: In this mode, you can select a lot of lines all at once, similar to what you do with the mouse. Here, you can use the same movements as in Normal mode, but this mode really shines in copying, pasting, and deleting lines. In Normal mode, press v to enter Visual mode. There are variations such as \u0026ldquo;visual block,\u0026rdquo; which lets you select by column, and \u0026ldquo;visual line,\u0026rdquo; which allows you to select several lines at the same time.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCommand: In this mode, which is accessed by pressing the : key in Normal mode, you can enter commands such as substitution commands or the help command, for example. I\u0026rsquo;m going to leave an image here that summarizes some of the commands available on the keyboard. You are probably screaming and asking, \u0026ldquo;WHY ARE THERE SO MANY MODES? I JUST WANT TO WRITE!\u0026rdquo; I know that at first it looks like an airplane cockpit, and that\u0026rsquo;s why I like to start with some history. You need to understand that this was created before the mouse era, so the big thing about Vim is that you can do pretty much everything using just the keyboard. Again, have a little patience, and you will get there.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca id=\"commands\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"5-useful-commands\"\u003e5. Useful Commands\u003c/h2\u003e\n\u003cp\u003eSo now that you are starting to get used to some terminologies and commands, we are going to move forward so that I can show you some commands that I think are very useful. So let\u0026rsquo;s get started:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ef\u0026lt;letter\u0026gt;: With this command, you can jump to a certain pattern within a line. You can go forward or backward using ; or ,.\u003c/li\u003e\n\u003cli\u003ex: Deletes a character.\u003c/li\u003e\n\u003cli\u003e0: Moves to the start of the line.\u003c/li\u003e\n\u003cli\u003e$: Moves to the end of the line.\u003c/li\u003e\n\u003cli\u003e*: Selects a whole word in the file. You can search for this word using n for forward searches or N for backward searches.\u003c/li\u003e\n\u003cli\u003e:\u0026lt;number\u0026gt;: Moves to any line that you specify.\u003c/li\u003e\n\u003cli\u003e:\u0026lt;number\u0026gt;t\u0026lt;number\u0026gt;: Copies the content from the first line number to the second line number.\u003c/li\u003e\n\u003cli\u003e:\u0026lt;number\u0026gt;m\u0026lt;number\u0026gt;: Moves the content from the first line number to the second line number.\u003c/li\u003e\n\u003cli\u003e\u0026lt;CTRL-o\u0026gt;: A very cool command that I don\u0026rsquo;t see many people talking about. If you press this in Insert mode, it enters Normal mode, executes an action, and returns to Insert mode.\u003c/li\u003e\n\u003cli\u003e\u0026lt;CTRL-n\u0026gt; and \u0026lt;CTRL-p\u0026gt;: These two commands in Insert mode permit you to autocomplete a word.\u003c/li\u003e\n\u003cli\u003e\u0026lt;CTRL-x\u0026gt; followed by \u0026lt;CTRL-l\u0026gt;: These two commands need to be used one after another, but they basically autocomplete an entire line.\u003c/li\u003e\n\u003cli\u003ek, j, h, and l: In Normal or Visual mode, these correspond to the arrows up (k), down (j), left (h), and right (l).\u003c/li\u003e\n\u003cli\u003ew: Moves to the start of the next word.\u003c/li\u003e\n\u003cli\u003ee: Moves to the end of the next word.\u003c/li\u003e\n\u003cli\u003eb: Moves to the start of the previous word.\u003c/li\u003e\n\u003cli\u003ey: Copies. yw copies the entire word.\u003c/li\u003e\n\u003cli\u003ep and P: Both are used to paste, but p pastes after the line, and P pastes before the line.\u003c/li\u003e\n\u003cli\u003ed: Deletes. It\u0026rsquo;s important to know that in Vim, deleting something is the same as cutting, so if you copy some text and then delete, the text in your buffer will be the one that was deleted. dw deletes an entire word.\u003c/li\u003e\n\u003cli\u003ec: Deletes and enters Insert mode (very good for saving time). One good use of this command is with w; cw lets you delete a word and insert text at the same time.\u003c/li\u003e\n\u003cli\u003e\u0026lt;CTRL-v\u0026gt; followed by \u0026lt;SHIFT-i\u0026gt;: When in block Visual mode, select all the lines that you want to edit, then press \u003cSHIFT-i\u003e and make the edits you want, then press \u0026lt;ESC\u0026gt;. All the lines you selected will be edited.\u003c/li\u003e\n\u003cli\u003e/ and ?: These commands allow you to search for a word in the entire file. n searches forward, and N searches backward. / starts the search from the top, and ? starts the search from the bottom.\u003c/li\u003e\n\u003cli\u003e// and ??: Executes the last search.\u003c/li\u003e\n\u003cli\u003e=: This magical command allows you to indent all your code (just beautiful).\u003c/li\u003e\n\u003cli\u003e.: Executes the last command.\u003c/li\u003e\n\u003cli\u003e%s/undone/done/g: This is an important command to remember. With this command, you can substitute every occurrence of a word. So let\u0026rsquo;s break it down: % means all lines (you could substitute this for specific lines), s means substitute, /undone is the word you are searching for, /done is the word that will replace /undone, and /g means to execute it globally; otherwise, it would execute just once per line.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are other commands and features you could learn about Vim, such as registers and macros, which can really improve your experience. But I won\u0026rsquo;t cover those in this article. If you are interested in this type of thing, you could refer to the book I recommended earlier; it covers a lot of this kind of content.\u003c/p\u003e\n\u003ch2 id=\"6-plug-ins-and-vimrc\"\u003e6. Plug-ins and .vimrc\u003c/h2\u003e\n\u003cp\u003eIf you are already feeling overwhelmed by all this, don\u0026rsquo;t worry; there\u0026rsquo;s always more. One of the greatest things about Vim is that it\u0026rsquo;s very flexible and lets you use the tool in the way that you think suits you best.\u003c/p\u003e\n\u003cp\u003eThere are two ways of customizing your Vim experience: you can modify its usability by adding extensions, which will give you a whole new perspective on what you can do. For that, you can use plug-ins. I have to admit that I\u0026rsquo;m not a huge fan of using plug-ins myself, but if you need something more robust, you should definitely take a look. When we talk about plug-ins, we also need to talk about Neovim. It’s essentially what Vim was to VI—a way to improve the software. Although there’s kind of a rivalry between users of both, I have to say that if you need something more like an IDE, you should definitely consider Neovim. The best thing about it is that you can have both on your machine, so it’s definitely worth exploring.\u003c/p\u003e\n\u003cp\u003eAnother thing you can do to make your life easier while using Vim is to have a good .vimrc, which is your configuration file. With this file, you can install your plug-ins, change keybindings, and more. Knowing how to configure your .vimrc is as important as learning any keybinding because it’s through this configuration file that you can make Vim feel exactly how you want it to, so keep that in mind.\u003c/p\u003e\n\u003cp\u003eOne of the things about dotfiles and plug-ins is that they are very personal, and I can’t tell you exactly what you should or shouldn’t use. Instead of showing you my dotfile and the plug-ins that I’m currently using, I will give you some links to good starting points:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/junegunn/vim-plug\"\u003eGitHub - junegunn/vim-plug: Minimalist Vim Plugin Manager\u003c/a\u003e This one is my personnal favorite in plug-in management, if you are gonna use the neovim you\u0026rsquo;re probably using other extension but this one works quite well for me.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/NvChad/NvChad\"\u003eGitHub - NvChad/NvChad: An attempt to make neovim cli functional like an IDE while being very beautiful, blazing fast startuptime ~ 14ms to 67ms\u003c/a\u003e This is more a a place to start, here you are gonna find a neovim distribution that come with a lot of things pre-configured, you don\u0026rsquo;t need to use this but it\u0026rsquo;s nice to have a base to start with.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://vimhelp.org/?\"\u003eVim: help.txt\u003c/a\u003e again the vim documentation is one of the best places to get anything that you need to know. And this is the case for .vimrc .\u003c/p\u003e\n\u003cp\u003eYou can also get better information about the options in .vimrc with the command :help vimrc.\u003c/p\u003e\n\u003ch2 id=\"end\"\u003eEND\u003c/h2\u003e\n\u003cp\u003eSo we’ve reached the end of this article. I hope that you’ve gotten a good push in the direction of how to use Vim and where to start. And as always, remember :wq (stay safe and goodbye).\u003c/p\u003e\n",
      "url": "https://Victor-Briganti.github.io/posts/vim-exiting/",
      "date_published": "10106-10-09T100:1010:00+00:00",
      "date_modified": "10106-10-09T100:1010:00+00:00",
      "author": {
        "name": "Victor Briganti",
        "url": "https://Victor-Briganti.github.io"
      }
    },
    
    {
      "id": "8c45a9430c3a61ee7535112a3ae9cbc56de0a201",
      "title": "Generating Random Passwords",
      "summary": "",
      "content_text": " Introduction Why Can\u0026rsquo;t Computers Generate Random Numbers? /dev/urandom and /dev/random Implementing a CLI on Linux 1. Introduction I have been taking some classes at the university over the past few weeks, and we have started to get a grasp on the C programming language. I really like the idea of seeing how things work under the hood. However, I believe that the best way to see if you are making progress is to work on projects. One of the things I consider very useful, but which is not provided by default on Linux, is a random password generator. So, I decided to create a simple CLI program that generates random passwords. In this article, we will explore how this program is implemented and why I made certain decisions.\n2. Why Can\u0026rsquo;t Computers Generate Random Numbers? As you may know, a computer is essentially a sophisticated calculator, used historically by NASA to go to the moon and more recently by your grandmother to play Candy Crush. Because of this, computers are designed to perform calculations, which makes true random number generation difficult. If you think about it, you can\u0026rsquo;t simply input two values into a calculator and expect a random result (e.g., 2+2=127), and thank goodness for that. While it\u0026rsquo;s good that computers don\u0026rsquo;t return truly random numbers in their calculations, this becomes problematic when true randomness is needed, such as in cryptography.\nTo address this, some very smart people have developed methods for generating pseudo-random numbers. Most programming languages and even operating systems have implementations for generating pseudo-random numbers. In C, a common function provided by the standard library is rand() and its companion srand():\nrand(): This function returns a pseudo-random number. Its implementation is as follows: int rand_r (unsigned int *seed) { unsigned int next = *seed; int result; next *= 1103515245; next += 12345; result = (unsigned int) (next / 65536) % 2048; next *= 1103515245; next += 12345; result \u0026lt;\u0026lt;= 10; result ^= (unsigned int) (next / 65536) % 1024; next *= 1103515245; next += 12345; result \u0026lt;\u0026lt;= 10; result ^= (unsigned int) (next / 65536) % 1024; *seed = next; return result; } Source: What common algorithms are used for C\u0026rsquo;s rand()? - Stack Overflow\nThis function uses a seed (an integer) and performs basic computational operations like addition, multiplication, and bit manipulation to generate a number that \u0026ldquo;looks\u0026rdquo; random. Note that this function will always generate the same sequence of numbers given the same seed, so be cautious when using it in production.\nsrand(): This function is used to set the seed for rand(). The \u0026rsquo;s\u0026rsquo; in srand stands for seed. Unlike rand(), srand() requires an argument, which is usually the current time (using the time.h library in C). By providing a new seed each time the program runs, you ensure different random numbers. Although these functions are good for generating random numbers, they may not be suitable for more robust needs, such as in a password generator that requires high entropy (i.e., completely different numbers). As previously mentioned, rand() generates the same sequence of numbers if given the same seed, and srand() can cause issues if the seed is not sufficiently varied, potentially generating the same password.\nTherefore, I decided to use a different approach to generate the random numbers needed for my program.\nNote: If you are interested in the topic of generating random numbers, here are three videos that discuss this subject:\nRandom Numbers (How Software Works) - YouTube Random Numbers with LFSR (Linear Feedback Shift Register) - Computerphile - YouTube NMCS4ALL: Random number generators - YouTube /dev/random and /dev/urandom Before diving into the details of my approach, it\u0026rsquo;s important to note that the method I\u0026rsquo;m using is just one of many ways to generate random numbers. A quick search in C forums will reveal numerous libraries with complex mathematical expressions used for this purpose. Here is a Wikipedia article that provides an overview of some random number generation algorithms: List of Random Number Generators - Wikipedia.\nI will now discuss two files in the Linux system: /dev/random and /dev/urandom. Both of these files are used by the OS to generate random numbers. They essentially provide a stream of \u0026ldquo;noise\u0026rdquo; from the system, collected from drivers and other sources since boot.\nYou may wonder why there are two files. /dev/random is built up as the system runs and needs time to collect sufficient noise. This can cause reads from this file to be blocked until it has enough entropy to provide a response.\nIn contrast, /dev/urandom uses some of the already existing noise in the system, which makes it slightly less random, but it is available immediately for requests.\nHere’s how this is done in my code:\nvoid gendigit(int size){ unsigned int randval; FILE *f; char list[] = NUM; char pass[size]; f = fopen(\u0026#34;/dev/urandom\u0026#34;, \u0026#34;r\u0026#34;); for (i=0; i\u0026lt;size; i++) { fread(\u0026amp;randval, sizeof(randval), 1, f); pass[i] = list[randval % 10]; printf(\u0026#34;%c\u0026#34;, pass[i]); } fclose(f); printf(\u0026#34;\\n\u0026#34;); } In this function, we print a series of random digits. The pointer *f of type FILE is used to open the /dev/urandom file, read random values, and generate a password. This pointer is somewhat analogous to how your grandmother might read a restaurant menu by moving her finger across it.\n4. Implementing the CLI Program As mentioned, this is about a CLI program, so we need to work with the shell. I won\u0026rsquo;t explain how the shell works in this article, as it\u0026rsquo;s a broad topic, but I will briefly cover how to enhance your CLI program with some shell functions.\nIf you’ve used Linux, you’ve likely used the terminal. Pressing while typing a command in the terminal triggers auto-completion, which is a useful feature. Shell variables can be used or created for various purposes. Shells often work with parent and child processes, with variables existing only in one or the other, or both.\nWhen you execute a script with ./script.sh, only the variables specified in the script are available. Using the source command executes the script in the current shell process, making all variables in and out of the script accessible. This is why you always need to source your .bashrc to apply new settings.\nHere’s an example of a bash completion script:\n#!/bin/bash _genp_completion() { if [ \u0026#34;${#COMP_WORDS[@]}\u0026#34; != \u0026#34;2\u0026#34; ]; then return fi COMPREPLY=($(compgen -W \u0026#34;--alphanum --digit --symbol --help\u0026#34; -- \u0026#34;${COMP_WORDS[1]}\u0026#34;)) } complete -F _genp_completion genp This script enables auto-completion for the genp command by using complete to call a function that checks the number of arguments and provides completion options.\nTo use this script, add the following line to your .bashrc:\nsource \u0026lt;dir\u0026gt;/genp_completion.bash This allows you to use for auto-completing the options available in your program.\nHere are some useful links to understand the source command and bash completion:\nlinux - What is the difference between executing a Bash script vs sourcing it? - Super User\nCreating a bash completion script\nHow to Use Bash Programmable Completion\nEND With that, we come to the end of this article. Here is the source code for this program on GitHub and GitLab, along with the guide to installing the autocompletion I discussed. The program is functional but has room for improvement. If you spot a bug or have suggestions, I’d love to hear from you. Take care, and see you next time.\nFeel free to adjust further based on your preferences!\n",
      "content_html": "\u003col\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#im-sorry-dave\"\u003eWhy Can\u0026rsquo;t Computers Generate Random Numbers?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#random\"\u003e/dev/urandom and /dev/random\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#cli\"\u003eImplementing a CLI on Linux\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ca id=\"introduction\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"1-introduction\"\u003e1. Introduction\u003c/h2\u003e\n\u003cp\u003eI have been taking some classes at the university over the past few weeks, and we have started to get a grasp on the C programming language. I really like the idea of seeing how things work under the hood. However, I believe that the best way to see if you are making progress is to work on projects. One of the things I consider very useful, but which is not provided by default on Linux, is a random password generator. So, I decided to create a simple CLI program that generates random passwords. In this article, we will explore how this program is implemented and why I made certain decisions.\u003c/p\u003e\n\u003cp\u003e\u003ca id=\"im-sorry-dave\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"2-why-cant-computers-generate-random-numbers\"\u003e2. Why Can\u0026rsquo;t Computers Generate Random Numbers?\u003c/h2\u003e\n\u003cp\u003eAs you may know, a computer is essentially a sophisticated calculator, used historically by NASA to go to the moon and more recently by your grandmother to play Candy Crush. Because of this, computers are designed to perform calculations, which makes true random number generation difficult. If you think about it, you can\u0026rsquo;t simply input two values into a calculator and expect a random result (e.g., 2+2=127), and thank goodness for that. While it\u0026rsquo;s good that computers don\u0026rsquo;t return truly random numbers in their calculations, this becomes problematic when true randomness is needed, such as in cryptography.\u003c/p\u003e\n\u003cp\u003eTo address this, some very smart people have developed methods for generating pseudo-random numbers. Most programming languages and even operating systems have implementations for generating pseudo-random numbers. In C, a common function provided by the standard library is rand() and its companion srand():\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003erand(): This function returns a pseudo-random number. Its implementation is as follows:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#00a8c8\"\u003eint\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75af00\"\u003erand_r\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eseed\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#00a8c8\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#111\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eseed\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#00a8c8\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eresult\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1103515245\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e12345\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e65536\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2048\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1103515245\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e12345\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e^=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e65536\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1024\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1103515245\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e12345\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e^=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e65536\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1024\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eseed\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003enext\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#00a8c8\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eresult\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSource: What common algorithms are used for C\u0026rsquo;s rand()? - Stack Overflow\u003c/p\u003e\n\u003cp\u003eThis function uses a seed (an integer) and performs basic computational operations like addition, multiplication, and bit manipulation to generate a number that \u0026ldquo;looks\u0026rdquo; random. Note that this function will always generate the same sequence of numbers given the same seed, so be cautious when using it in production.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003esrand(): This function is used to set the seed for rand(). The \u0026rsquo;s\u0026rsquo; in srand stands for seed. Unlike rand(), srand() requires an argument, which is usually the current time (using the time.h library in C). By providing a new seed each time the program runs, you ensure different random numbers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAlthough these functions are good for generating random numbers, they may not be suitable for more robust needs, such as in a password generator that requires high entropy (i.e., completely different numbers). As previously mentioned, rand() generates the same sequence of numbers if given the same seed, and srand() can cause issues if the seed is not sufficiently varied, potentially generating the same password.\u003c/p\u003e\n\u003cp\u003eTherefore, I decided to use a different approach to generate the random numbers needed for my program.\u003c/p\u003e\n\u003cp\u003eNote: If you are interested in the topic of generating random numbers, here are three videos that discuss this subject:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=aSlkVy3mbR0\u0026amp;list=TLPQMDkwOTIwMjIIH55doAV2ew\u0026amp;index=4\"\u003eRandom Numbers (How Software Works) - YouTube\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=Ks1pw1X22y4\u0026amp;list=TLPQMDkwOTIwMjIIH55doAV2ew\u0026amp;index=4\"\u003eRandom Numbers with LFSR (Linear Feedback Shift Register) - Computerphile - YouTube\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=_tN2ev3hO14\"\u003eNMCS4ALL: Random number generators - YouTube\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca id=\"random\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e/dev/random and /dev/urandom\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBefore diving into the details of my approach, it\u0026rsquo;s important to note that the method I\u0026rsquo;m using is just one of many ways to generate random numbers. A quick search in C forums will reveal numerous libraries with complex mathematical expressions used for this purpose. Here is a Wikipedia article that provides an overview of some random number generation algorithms: List of Random Number Generators - Wikipedia.\u003c/p\u003e\n\u003cp\u003eI will now discuss two files in the Linux system: /dev/random and /dev/urandom. Both of these files are used by the OS to generate random numbers. They essentially provide a stream of \u0026ldquo;noise\u0026rdquo; from the system, collected from drivers and other sources since boot.\u003c/p\u003e\n\u003cp\u003eYou may wonder why there are two files. /dev/random is built up as the system runs and needs time to collect sufficient noise. This can cause reads from this file to be blocked until it has enough entropy to provide a response.\u003c/p\u003e\n\u003cp\u003eIn contrast, /dev/urandom uses some of the already existing noise in the system, which makes it slightly less random, but it is available immediately for requests.\u003c/p\u003e\n\u003cp\u003eHere’s how this is done in my code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003egendigit\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#111\"\u003esize\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#111\"\u003erandval\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003eFILE\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#111\"\u003elist\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003eNUM\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#111\"\u003epass\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#111\"\u003esize\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003ef\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003efopen\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;/dev/urandom\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#d88200\"\u003e\u0026#34;r\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#00a8c8\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003esize\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75af00\"\u003efread\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003erandval\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003esizeof\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003erandval\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e),\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#111\"\u003epass\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003elist\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#111\"\u003erandval\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75af00\"\u003eprintf\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;%c\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#111\"\u003epass\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75af00\"\u003efclose\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75af00\"\u003eprintf\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#8045ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this function, we print a series of random digits. The pointer *f of type FILE is used to open the /dev/urandom file, read random values, and generate a password. This pointer is somewhat analogous to how your grandmother might read a restaurant menu by moving her finger across it.\u003c/p\u003e\n\u003cp\u003e\u003ca id=\"cli\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"4-implementing-the-cli-program\"\u003e4. Implementing the CLI Program\u003c/h2\u003e\n\u003cp\u003eAs mentioned, this is about a CLI program, so we need to work with the shell. I won\u0026rsquo;t explain how the shell works in this article, as it\u0026rsquo;s a broad topic, but I will briefly cover how to enhance your CLI program with some shell functions.\u003c/p\u003e\n\u003cp\u003eIf you’ve used Linux, you’ve likely used the terminal. Pressing \u003cTAB\u003e while typing a command in the terminal triggers auto-completion, which is a useful feature. Shell variables can be used or created for various purposes. Shells often work with parent and child processes, with variables existing only in one or the other, or both.\u003c/p\u003e\n\u003cp\u003eWhen you execute a script with ./script.sh, only the variables specified in the script are available. Using the source command executes the script in the current shell process, making all variables in and out of the script accessible. This is why you always need to source your .bashrc to apply new settings.\u003c/p\u003e\n\u003cp\u003eHere’s an example of a bash completion script:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#!/bin/bash\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_genp_completion\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e \u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e${#\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eCOMP_WORDS\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[@]\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e !\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#d88200\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e \u003cspan style=\"color:#00a8c8\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003eCOMPREPLY\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=(\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003e$(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003ecompgen\u003c/span\u003e -W \u003cspan style=\"color:#d88200\"\u003e\u0026#34;--alphanum --digit --symbol --help\u0026#34;\u003c/span\u003e -- \u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#111\"\u003eCOMP_WORDS\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[1]\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#00a8c8\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003ecomplete\u003c/span\u003e -F _genp_completion genp\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis script enables auto-completion for the genp command by using complete to call a function that checks the number of arguments and provides completion options.\u003c/p\u003e\n\u003cp\u003eTo use this script, add the following line to your .bashrc:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003esource\u003c/span\u003e \u0026lt;dir\u0026gt;/genp_completion.bash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis allows you to use \u003cTAB\u003e for auto-completing the options available in your program.\u003c/p\u003e\n\u003cp\u003eHere are some useful links to understand the source command and bash completion:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://superuser.com/questions/176783/what-is-the-difference-between-executing-a-bash-script-vs-sourcing-it/176788#176788\"\u003elinux - What is the difference between executing a Bash script vs sourcing it? - Super User\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://iridakos.com/programming/2018/03/01/bash-programmable-completion-tutorial\"\u003eCreating a bash completion script\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://spin.atomicobject.com/2016/02/14/bash-programmable-completion/\"\u003eHow to Use Bash Programmable Completion\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"end\"\u003eEND\u003c/h2\u003e\n\u003cp\u003eWith that, we come to the end of this article. Here is the source code for this program on GitHub and GitLab, along with the guide to installing the autocompletion I discussed. The program is functional but has room for improvement. If you spot a bug or have suggestions, I’d love to hear from you. Take care, and see you next time.\u003c/p\u003e\n\u003cp\u003eFeel free to adjust further based on your preferences!\u003c/p\u003e\n",
      "url": "https://Victor-Briganti.github.io/posts/generate-password/",
      "date_published": "9096-09-09T90:99:00+00:00",
      "date_modified": "9096-09-09T90:99:00+00:00",
      "author": {
        "name": "Victor Briganti",
        "url": "https://Victor-Briganti.github.io"
      }
    },
    
    {
      "id": "e8c762b0008fb2520202c7d11892cbd37fa2f72f",
      "title": "Implementing 2fa Authentication in PHP",
      "summary": "2fa Authentication in PHP",
      "content_text": " Introduction What is OTP? URI Format Encoding with Base32 Generating a QR Code 1. Introduction For the past month, I have been working on a library for PHP that implements OTP (One-Time Password) in an easy way. In the following sections, I will explain each technology and protocol used to build this software. If you prefer to skip the technical details, you can go directly to the explanation of the library.\n2. What is OTP? Simply put, OTP is a One-Time Password. It’s a password that can only be used once and is commonly used in two-factor authentication. There are various ways to implement OTPs in hardware or software, involving different algorithms for generating these passwords. In this article, I will explain a bit about HOTP (HMAC-based OTP) and TOTP (Time-based OTP).\nHOTP: Before explaining HOTP, it’s important to understand HMAC. HMAC stands for Hash-based Message Authentication Code, which essentially means that the message is encrypted using a secret key. In simple terms, HMAC takes a message and a secret, combines them, and uses an algorithm like SHA-1 to produce a hash. Now that you understand HMAC, we can look at RFC 4226, which defines HOTP and its implementation. This standard describes HOTP as a count-based or sequential-based method for generating one-time passwords. Each time a password is used, its count is incremented (usually by 1), resulting in a new password. The number of digits, how the count increments, and the hash algorithm can be customized. Due to its simplicity, HOTP can be implemented on many devices (which just need to count). To use HOTP, you need a password that can be randomly generated by the system or created by the user. HMAC and the algorithm generate these codes, as explained in the algorithm section. From the user’s perspective, they use the OTP, and each time they are authenticated, they must refresh their password, increasing the count. Despite its simplicity, there are important security and reliability measures to consider. For example, implement methods to prevent brute-force attacks since a 6-digit password can be easily brute-forced. It’s also crucial to handle the count value properly; if the user is using an app like Google Authenticator, your system doesn’t know the user’s count. Implement a window of values to verify counts that are out of sync with the server.\nTOTP: Defined by RFC 6238, TOTP is a variant of HOTP that uses time instead of a counter for password generation. Essentially, TOTP is similar to HOTP, but it incorporates UNIX timestamps. UNIX was one of the first operating systems and introduced a time standard that marks the start as January 1, 1970, 00:00:00. This timestamp is widely used today, and TOTP uses this to determine the value for generating the OTP. Instead of counts, TOTP defines a time period (usually 30 seconds) during which the password is valid. The advantage of TOTP is that the password regenerates within each period, so the user doesn’t need to refresh it manually. However, this introduces the issue of clock synchronization. To address this, you can implement control measures, such as checking time with an NTP server, but this also has limitations (latency, server downtime, etc.). Another approach is to create a time window, similar to the HOTP count, where you verify a period before and after the current time.\nAlgorithm: Now that you understand HOTP and TOTP, let’s briefly look at how the algorithm generating these digits works. First, generate the hash using the count/time value, secret, and hash algorithm. The secret can be randomly generated or entered by the user, and the hash algorithm can be chosen from accepted algorithms (e.g., SHA1, SHA256, SHA512). The count/time needs to be transformed into a binary string. Here’s a brief overview of the PHP code for HOTP and TOTP:\nHOTP:\n\u0026lt;?php for ($i = 7; $i \u0026gt;= 0; $i--) { $byte_count[$i] = chr($count \u0026amp; 0xff); $count = $count \u0026gt;\u0026gt; 8; } This loop processes each byte of the count, masks it with 0xff to get the bits, and converts it to a character. The count is then shifted right by 8 bits to process the next byte. If the resulting string is less than 8 bytes, it pads with 0s.\nTOTP:\n\u0026lt;?php $binary_timestamp = pack(\u0026#39;N*\u0026#39;, 0) . pack(\u0026#39;N*\u0026#39;, floor($unix_time / $period)); This line packs the time value into a binary string. It includes an initial 0 and the time divided by the period to ensure the full 8-byte value is obtained.\nWith the count/time in hand, the hash is created, and the algorithm generates the OTP. The process involves extracting bytes, forming a hexadecimal code, converting to decimal, and then generating the final password.\n3. URI Default Format If you have used 2FA authentication, you might have scanned a QR code generated by Google Authenticator (or AEGIS, which is better). To generate the QR code, the system needs a base text value containing all the necessary variables. This URI format is defined by Google (did I mention AEGIS is better?):\notpauth://{totp|hotp}/{issuer}:{user}?secret={base32}\u0026amp;issuer={issuer}\u0026amp;algorithm={algo}\u0026amp;digits={number}\u0026amp;period|count={time|count} totp|hotp: Defines the protocol used issuer: Name of the program or company user: Username base32: The secret (encoded in base32) algo: Algorithm used to generate the hash number: Number of digits period|count: For TOTP, use period; for HOTP, use count time|count: Defines the number of seconds (TOTP) or initial count (HOTP) Most parameters are optional; only issuer, user, and secret are essential. If omitted, default values are used (count=0, period=30, algorithm=SHA1):\notpauth://{totp|hotp}/{issuer}:{user}?secret={base32} 4. Encoding with Base32 To generate the URI format, the library needs to encode a string in base32. Unfortunately, PHP lacks a built-in library for base32, so I created one. RFC 4648 describes base32 encoding, which uses an alphabet of 32 characters (letters and digits) where each character maps to a number. The base32 encoding process involves mapping the first 5 bits of the string to a character from the alphabet and continuing this process until all bits are processed. Padding with = is sometimes used, but my library does not include it. Decoding reverses the process, converting characters back to bits.\n5. Generating a QR Code For QR Code generation, I used a library to convert the URI text into a QR Code image. This library allows customization of QR Code size, error correction level, mode (numeric, alphanumeric, byte, kanji), and output format (image or HTML). The QR Code (Quick Response Code) evolved from barcodes to store more data, using vertical and horizontal encoding. It includes Reed-Solomon error correction to ensure readability even if the code is damaged.\nFor more information on QR Codes, visit QR Code official site.\nEND I hope this article provides a good overview of OTP and the technologies used to create these passwords. Feel free to use or improve the library for your projects. The source code is available on my GitHub or GitLab, including a README file explaining how to use the library to generate OTPs, URIs, and QR Codes.\nThat’s all, folks!\n",
      "content_html": "\u003col\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#what-is-otp\"\u003eWhat is OTP?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#uri-format\"\u003eURI Format\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#encoding-with-base32\"\u003eEncoding with Base32\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#generating-qr-code\"\u003eGenerating a QR Code\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ca id=\"introduction\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"1-introduction\"\u003e1. Introduction\u003c/h2\u003e\n\u003cp\u003eFor the past month, I have been working on a library for PHP that implements OTP (One-Time Password) in an easy way. In the following sections, I will explain each technology and protocol used to build this software. If you prefer to skip the technical details, you can go directly to the explanation of the library.\u003c/p\u003e\n\u003cp\u003e\u003ca id=\"what-is-otp\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"2-what-is-otp\"\u003e2. What is OTP?\u003c/h2\u003e\n\u003cp\u003eSimply put, OTP is a One-Time Password. It’s a password that can only be used once and is commonly used in two-factor authentication. There are various ways to implement OTPs in hardware or software, involving different algorithms for generating these passwords. In this article, I will explain a bit about HOTP (HMAC-based OTP) and TOTP (Time-based OTP).\u003c/p\u003e\n\u003cp\u003eHOTP: Before explaining HOTP, it’s important to understand HMAC. HMAC stands for Hash-based Message Authentication Code, which essentially means that the message is encrypted using a secret key. In simple terms, HMAC takes a message and a secret, combines them, and uses an algorithm like SHA-1 to produce a hash. Now that you understand HMAC, we can look at RFC 4226, which defines HOTP and its implementation. This standard describes HOTP as a count-based or sequential-based method for generating one-time passwords. Each time a password is used, its count is incremented (usually by 1), resulting in a new password. The number of digits, how the count increments, and the hash algorithm can be customized. Due to its simplicity, HOTP can be implemented on many devices (which just need to count). To use HOTP, you need a password that can be randomly generated by the system or created by the user. HMAC and the algorithm generate these codes, as explained in the algorithm section. From the user’s perspective, they use the OTP, and each time they are authenticated, they must refresh their password, increasing the count. Despite its simplicity, there are important security and reliability measures to consider. For example, implement methods to prevent brute-force attacks since a 6-digit password can be easily brute-forced. It’s also crucial to handle the count value properly; if the user is using an app like Google Authenticator, your system doesn’t know the user’s count. Implement a window of values to verify counts that are out of sync with the server.\u003c/p\u003e\n\u003cp\u003eTOTP: Defined by RFC 6238, TOTP is a variant of HOTP that uses time instead of a counter for password generation. Essentially, TOTP is similar to HOTP, but it incorporates UNIX timestamps. UNIX was one of the first operating systems and introduced a time standard that marks the start as January 1, 1970, 00:00:00. This timestamp is widely used today, and TOTP uses this to determine the value for generating the OTP. Instead of counts, TOTP defines a time period (usually 30 seconds) during which the password is valid. The advantage of TOTP is that the password regenerates within each period, so the user doesn’t need to refresh it manually. However, this introduces the issue of clock synchronization. To address this, you can implement control measures, such as checking time with an NTP server, but this also has limitations (latency, server downtime, etc.). Another approach is to create a time window, similar to the HOTP count, where you verify a period before and after the current time.\u003c/p\u003e\n\u003cp\u003eAlgorithm: Now that you understand HOTP and TOTP, let’s briefly look at how the algorithm generating these digits works. First, generate the hash using the count/time value, secret, and hash algorithm. The secret can be randomly generated or entered by the user, and the hash algorithm can be chosen from accepted algorithms (e.g., SHA1, SHA256, SHA512). The count/time needs to be transformed into a binary string. Here’s a brief overview of the PHP code for HOTP and TOTP:\u003c/p\u003e\n\u003cp\u003eHOTP:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan style=\"color:#75af00\"\u003ephp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#00a8c8\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e$i\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e$i\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e$i\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e$byte_count\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e$i\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003echr\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e$count\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0xff\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#111\"\u003e$count\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e$count\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis loop processes each byte of the count, masks it with 0xff to get the bits, and converts it to a character. The count is then shifted right by 8 bits to process the next byte. If the resulting string is less than 8 bytes, it pads with 0s.\u003c/p\u003e\n\u003cp\u003eTOTP:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan style=\"color:#75af00\"\u003ephp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#111\"\u003e$binary_timestamp\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003epack\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#39;N*\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003epack\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#d88200\"\u003e\u0026#39;N*\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#75af00\"\u003efloor\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e$unix_time\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#111\"\u003e$period\u003c/span\u003e\u003cspan style=\"color:#111\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis line packs the time value into a binary string. It includes an initial 0 and the time divided by the period to ensure the full 8-byte value is obtained.\u003c/p\u003e\n\u003cp\u003eWith the count/time in hand, the hash is created, and the algorithm generates the OTP. The process involves extracting bytes, forming a hexadecimal code, converting to decimal, and then generating the final password.\u003c/p\u003e\n\u003cp\u003e\u003ca id=\"uri-format\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"3-uri-default-format\"\u003e3. URI Default Format\u003c/h2\u003e\n\u003cp\u003eIf you have used 2FA authentication, you might have scanned a QR code generated by Google Authenticator (or AEGIS, which is better). To generate the QR code, the system needs a base text value containing all the necessary variables. This URI format is defined by Google (did I mention AEGIS is better?):\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eotpauth://{totp|hotp}/{issuer}:{user}?secret={base32}\u0026amp;issuer={issuer}\u0026amp;algorithm={algo}\u0026amp;digits={number}\u0026amp;period|count={time|count}\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003etotp|hotp: Defines the protocol used\u003c/li\u003e\n\u003cli\u003eissuer: Name of the program or company\u003c/li\u003e\n\u003cli\u003euser: Username\u003c/li\u003e\n\u003cli\u003ebase32: The secret (encoded in base32)\u003c/li\u003e\n\u003cli\u003ealgo: Algorithm used to generate the hash\u003c/li\u003e\n\u003cli\u003enumber: Number of digits\u003c/li\u003e\n\u003cli\u003eperiod|count: For TOTP, use period; for HOTP, use count\u003c/li\u003e\n\u003cli\u003etime|count: Defines the number of seconds (TOTP) or initial count (HOTP)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMost parameters are optional; only issuer, user, and secret are essential. If omitted, default values are used (count=0, period=30, algorithm=SHA1):\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eotpauth://{totp|hotp}/{issuer}:{user}?secret={base32}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ca id=\"encoding-with-base32\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"4-encoding-with-base32\"\u003e4. Encoding with Base32\u003c/h2\u003e\n\u003cp\u003eTo generate the URI format, the library needs to encode a string in base32. Unfortunately, PHP lacks a built-in library for base32, so I created one. RFC 4648 describes base32 encoding, which uses an alphabet of 32 characters (letters and digits) where each character maps to a number. The base32 encoding process involves mapping the first 5 bits of the string to a character from the alphabet and continuing this process until all bits are processed. Padding with = is sometimes used, but my library does not include it. Decoding reverses the process, converting characters back to bits.\u003c/p\u003e\n\u003cp\u003e\u003ca id=\"generating-qr-code\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"5-generating-a-qr-code\"\u003e5. Generating a QR Code\u003c/h2\u003e\n\u003cp\u003eFor QR Code generation, I used a library to convert the URI text into a QR Code image. This library allows customization of QR Code size, error correction level, mode (numeric, alphanumeric, byte, kanji), and output format (image or HTML). The QR Code (Quick Response Code) evolved from barcodes to store more data, using vertical and horizontal encoding. It includes Reed-Solomon error correction to ensure readability even if the code is damaged.\u003c/p\u003e\n\u003cp\u003eFor more information on QR Codes, visit QR Code official site.\u003c/p\u003e\n\u003ch2 id=\"end\"\u003eEND\u003c/h2\u003e\n\u003cp\u003eI hope this article provides a good overview of OTP and the technologies used to create these passwords. Feel free to use or improve the library for your projects. The source code is available on my GitHub or GitLab, including a README file explaining how to use the library to generate OTPs, URIs, and QR Codes.\u003c/p\u003e\n\u003cp\u003eThat’s all, folks!\u003c/p\u003e\n",
      "url": "https://Victor-Briganti.github.io/posts/2fa-authentication/",
      "date_published": "8086-08-09T80:88:00+00:00",
      "date_modified": "8086-08-09T80:88:00+00:00",
      "author": {
        "name": "Victor Briganti",
        "url": "https://Victor-Briganti.github.io"
      }
    }
    
  ]
}